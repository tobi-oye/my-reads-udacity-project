{"version":3,"sources":["BooksAPI.js","components/searchPage.js","components/mainPage.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","SearchPage","state","query","searchResult","updateQuerry","event","_this","setState","_this2","this","fetch","concat","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","data","books","BooksAPI","error","catch","console","log","_this3","_this$state","react_default","a","createElement","className","react_router_dom","to","type","placeholder","onChange","target","value","search","props","map","searchElem","style","width","height","backgroundImage","imageLinks","smallThumbnail","onClick","e","moveBook","disabled","values","options","slice","elem","id","key","label","selected","title","authors","Component","MainPage","bookShelves","book","shelveName","img","BooksApp","currentlyReading","wantToRead","read","none","allBooks","bookShelf","removeBook","addBook","updateBook","bookId","shelf","newElem","previousState","assign","singleElem","bigElem","filter","react_router","path","render","searchPage","showMainPage","exact","mainPage","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0c2a272f.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/:${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"../BooksAPI\";\n\nclass SearchPage extends Component {\n  state = {\n    query: \"\",\n    searchResult: [],\n  };\n  updateQuerry = (event) => {\n    this.setState({ query: event });\n  };\n\n  search(query) {\n    BooksAPI.search(query)\n      .then((res) => {\n        if (res.error) {\n          this.setState({ searchResult: [] });\n        } else {\n          return this.setState({ searchResult: res });\n        }\n      })\n      .catch(console.log(\"err\"));\n  }\n\n  render() {\n    const { searchResult, query } = this.state;\n    return (\n      <div>\n        <div className=\"search-books\">\n          <div className=\"search-books-bar\">\n            <Link className=\"close-search\" to=\"/\">\n              Close\n            </Link>\n            <div className=\"search-books-input-wrapper\">\n              {/*\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\n              You can find these search terms here:\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n              you don't find a specific author or title. Every search is limited by search terms.\n            */}\n              <input\n                type=\"text\"\n                placeholder=\"Search by title or author\"\n                onChange={(event) => {\n                  this.updateQuerry(event.target.value);\n                  if (event.target.value) {\n                    this.search(event.target.value);\n                  }\n                }}\n                value={query}\n              />\n            </div>\n          </div>\n          <div className=\"search-books-results\">\n            <ol className=\"books-grid\">\n              {this.props.searchResult !== [] ? (\n                searchResult.map((searchElem) => {\n                  return (\n                    <li>\n                      <div className=\"book\">\n                        <div className=\"book-top\">\n                          <div\n                            className=\"book-cover\"\n                            style={{\n                              width: 128,\n                              height: 193,\n                              backgroundImage: `url(${\n                                searchElem.imageLinks\n                                  ? searchElem.imageLinks.smallThumbnail\n                                  : ``\n                              })`,\n                            }}\n                          />\n\n                          <div className=\"book-shelf-changer\">\n                            <select\n                              onClick={(e) => {\n                                return this.props.moveBook([], e, searchElem);\n                              }}\n                            >\n                              <option value=\"move\" disabled>\n                                Move to...\n                              </option>\n                              {Object.values(this.props.options)\n                                .slice(0, 3)\n                                .map((elem) => {\n                                  return (\n                                    <option value={elem.id} key={elem.id}>\n                                      {\" \"}\n                                      {elem.label}{\" \"}\n                                    </option>\n                                  );\n                                })}\n                              <option selected>none</option>\n                            </select>\n                          </div>\n                        </div>\n                        <div className=\"book-title\">{searchElem.title}</div>\n                        <div className=\"book-authors\">\n                          {searchElem.authors ? searchElem.authors[0] : ``}\n                        </div>\n                      </div>\n                    </li>\n                  );\n                })\n              ) : searchResult === [] ? (\n                <p>result not found</p>\n              ) : (\n                ``\n              )}\n            </ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass MainPage extends Component {\n  render() {\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {Object.values(this.props.bookShelves).map((book) => {\n              return (\n                <div className=\"bookshelf\">\n                  <h2 className=\"bookshelf-title\">{book.shelveName}</h2>\n                  <div className=\"bookshelf-books\">\n                    <ol className=\"books-grid\">\n                      {book.books.map((img) => {\n                        return (\n                          <li>\n                            <div className=\"book\">\n                              <div className=\"book-top\">\n                                <div\n                                  className=\"book-cover\"\n                                  style={{\n                                    width: 128,\n                                    height: 193,\n                                    backgroundImage: `url(${\n                                      img.imageLinks.smallThumbnail\n                                    })`,\n                                  }}\n                                />\n\n                                <div className=\"book-shelf-changer\">\n                                  <select\n                                    onClick={(e) => {\n                                      return this.props.moveBook(book, e, img);\n                                    }}\n                                  >\n                                    <option value=\"move\" disabled selected>\n                                      Move to...\n                                    </option>\n                                    {Object.values(this.props.options).map(\n                                      (elem) => {\n                                        return (\n                                          <option value={elem.id} key={elem.id}>\n                                            {\" \"}\n                                            {elem.label}{\" \"}\n                                          </option>\n                                        );\n                                      }\n                                    )}\n                                  </select>\n                                </div>\n                              </div>\n                              <div className=\"book-title\">{img.title}</div>\n                              <div className=\"book-authors\">\n                                {img.authors[0]}\n                              </div>\n                            </div>\n                          </li>\n                        );\n                      })}\n                    </ol>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"/searchPage\">\n            <button />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport SearchPage from \"./components/searchPage\";\nimport MainPage from \"./components/mainPage\";\nimport { Route } from \"react-router-dom\";\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n\n    bookShelves: {\n      currentlyReading: { shelveName: \"Currently Reading\", books: [] },\n      wantToRead: { shelveName: \"Want to Read\", books: [] },\n      read: { shelveName: \"Read\", books: [] },\n    },\n    options: {\n      currentlyReading: { label: \"Currently Reading\", id: \"currentlyReading\" },\n      wantToRead: { label: \"Want to Read\", id: \"wantToRead\" },\n      read: { label: \"Read\", id: \"read\" },\n      none: { label: \"None\", id: \"none\" },\n    },\n    allBooks: [],\n  };\n\n  /**\n   * function to move book from one book shelve to the other\n   * @param {*} event\n   * it will get element id and clicked value from the click event\n   * conditional statement for the various values\n   *  if true add the new element id  to the array and filter the previous element based on id\n   *\n   */\n  moveBook = (bookShelf, e, book) => {\n    let value = e.target.value;\n    //  console.log(bookShelf.id,e.target.value,book.id)\n    // debugger\n    this.removeBook(book, bookShelf, value);\n    // debugger\n    this.addBook(value, book);\n    this.updateBook(book, value);\n    console.log(this.updateBook(book, value));\n    console.log(book.id, value);\n  };\n\n  /**\n   * function to call the update api\n   * it will accept the bookid and shelve name as arguement\n   */\n  updateBook(bookId, shelveName) {\n    // debugger\n    return BooksAPI.update(bookId, shelveName);\n  }\n  addBook(value, newElem) {\n    if (value === \"currentlyReading\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.currentlyReading.books = previousState.bookShelves.currentlyReading.books.concat(\n          newElem\n        );\n        return { bookShelves };\n      });\n    } else if (value === \"wantToRead\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.wantToRead.books = previousState.bookShelves.wantToRead.books.concat(\n          newElem\n        );\n        return { bookShelves };\n      });\n    } else if (value === \"read\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.read.books = previousState.bookShelves.read.books.concat(\n          newElem\n        );\n        return { bookShelves };\n      });\n    }\n  }\n  /**\n   * removeBook is a function used to remove the selected books from its current bookshelve\n   * @param {object for the book selected} singleElem\n   * @param {object for the bookshelve selected} bigElem\n   * @param {objet for the selected options from each book} value\n   */\n  removeBook(singleElem, bigElem, value) {\n    // debugger\n    if (bigElem.id === \"currentlyReading\" && value !== \"none\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.currentlyReading.books = previousState.bookShelves.currentlyReading.books.filter(\n          (elem) => {\n            // console.log(elem.id,singleElem.id);\n            return elem.id !== singleElem.id;\n          }\n        );\n        return { bookShelves };\n      });\n    } else if (bigElem.id === \"wantToRead\" && value !== \"none\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.wantToRead.books = previousState.bookShelves.wantToRead.books.filter(\n          (elem) => {\n            // console.log(elem.id,singleElem.id);\n            return elem.id !== singleElem.id;\n          }\n        );\n        return { bookShelves };\n      });\n    } else if (bigElem.id === \"read\" && value !== \"none\") {\n      return this.setState((previousState) => {\n        let bookShelves = Object.assign({}, previousState.bookShelves);\n        bookShelves.read.books = previousState.bookShelves.read.books.filter(\n          (elem) => {\n            // console.log(elem.id,singleElem.id);\n            return elem.id !== singleElem.id;\n          }\n        );\n        return { bookShelves };\n      });\n    }\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then((res) => {\n      return this.setState({\n        allBooks: res,\n        bookShelves: {\n          currentlyReading: {\n            shelveName: \"Currently Reading\",\n            books: res.slice(0, 2),\n            id: \"currentlyReading\",\n          },\n          wantToRead: {\n            shelveName: \"Want to Read\",\n            books: res.slice(2, 4),\n            id: \"wantToRead\",\n          },\n          read: { shelveName: \"Read\", books: res.slice(4, 7), id: \"read\" },\n        },\n      });\n    });\n  }\n\n  render() {\n    const { bookShelves, options } = this.state;\n    //  console.log(this.state.wantToRead)\n    // console.log(bookShelves.wantToRead.books);\n    return (\n      <div className=\"app\">\n        <Route\n          path=\"/searchPage\"\n          render={() => {\n            return (\n              <SearchPage\n                options={options}\n                showMainPage={this.showMainPage}\n                moveBook={this.moveBook}\n              />\n            );\n          }}\n        />\n        <Route\n          exact\n          path=\"/\"\n          render={() => {\n            return (\n              <MainPage\n                bookShelves={bookShelves}\n                options={options}\n                moveBook={this.moveBook}\n              />\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}